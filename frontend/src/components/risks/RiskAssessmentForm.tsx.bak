import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Box,
  Typography,
  Stack,
  Paper,
  Divider,
  Chip,
  IconButton,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  useTheme,
  alpha,
  Autocomplete,
  Alert,
  Tooltip,
} from '@mui/material';
import Grid from '@mui/material/Grid2';
import {
  Add as AddIcon,
  Delete as DeleteIcon,
  ExpandMore as ExpandMoreIcon,
  Info as InfoIcon,
  Warning as WarningIcon,
  CheckCircle as CheckCircleIcon,
} from '@mui/icons-material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import axiosInstance from '../../utils/axiosInstance';
import { useAuth } from '../../context/AuthContext';

interface MatrixConfig {
  low_threshold: number;
  medium_threshold: number;
  low_risk_color: string;
  medium_risk_color: string;
  high_risk_color: string;
  probability_definitions: { [key: string]: any };
  severity_definitions: { [key: string]: any };
}

interface Props {
  open: boolean;
  onClose: () => void;
  onSuccess: () => void;
  editingAssessment?: any;
}

const RiskAssessmentForm: React.FC<Props> = ({ open, onClose, onSuccess, editingAssessment }) => {
  const theme = useTheme();
  const { user } = useAuth();
  const [config, setConfig] = useState<MatrixConfig | null>(null);
  const [users, setUsers] = useState<any[]>([]);
  const [submitting, setSubmitting] = useState(false);
  
  // Form data
  const [formData, setFormData] = useState({
    location: '',
    process_area: '',
    activity_description: '',
    risk_category: 'SAFETY',
    activity_type: 'ROUTINE',
    assessment_date: new Date(),
    risk_owner_id: null as number | null,
    
    // Hazard
    hazard_type: 'PROCESS',
    hazard_description: '',
    event_description: '',
    causes: '',
    consequences: '',
    impact_type: 'INJURY',
    
    // Exposure
    affected_personnel: 'EMPLOYEES',
    number_exposed: 1,
    exposure_frequency: 'OCCASIONAL',
    exposure_duration: '',
    vulnerable_groups: '',
    
    // Initial Risk
    initial_probability: 3,
    initial_severity: 3,
    
    // Residual Risk
    residual_probability: 2,
    residual_severity: 2,
    
    // Evaluation
    risk_acceptable: false,
    alarp_required: false,
    alarp_justification: '',
    management_decision: '',
    
    // Compliance
    iso_45001_clauses: [] as string[],
    legal_requirements: [] as string[],
    
    comments: '',
  });
  
  const [preventiveBarriers, setPreventiveBarriers] = useState<any[]>([]);
  const [protectiveBarriers, setProtectiveBarriers] = useState<any[]>([]);
  const [additionalActions, setAdditionalActions] = useState<any[]>([]);
  
  useEffect(() => {
    if (open) {
      fetchData();
    }
  }, [open]);
  
  const fetchData = async () => {
    try {
      const [configRes, usersRes] = await Promise.all([
        axiosInstance.get('/risks/matrix-config/'),
        axiosInstance.get('/users/'),
      ]);
      setConfig(configRes.data);
      setUsers(usersRes.data);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };
  
  const getRiskLevel = (prob: number, sev: number) => prob * sev;
  
  const getRiskColor = (riskLevel: number) => {
    if (!config) return theme.palette.grey[500];
    if (riskLevel <= config.low_threshold) return config.low_risk_color;
    if (riskLevel <= config.medium_threshold) return config.medium_risk_color;
    return config.high_risk_color;
  };
  
  const getRiskRating = (riskLevel: number) => {
    if (!config) return '';
    if (riskLevel <= config.low_threshold) return 'LOW';
    if (riskLevel <= config.medium_threshold) return 'MEDIUM';
    return 'HIGH';
  };
  
  const initialRiskLevel = getRiskLevel(formData.initial_probability, formData.initial_severity);
  const residualRiskLevel = getRiskLevel(formData.residual_probability, formData.residual_severity);
  
  const addBarrier = (type: 'preventive' | 'protective') => {
    const newBarrier = {
      description: '',
      hierarchy_level: 3,
      effectiveness_rating: 3,
      evidence: '',
      condition: 'GOOD',
      barrier_owner_id: null,
    };
    
    if (type === 'preventive') {
      setPreventiveBarriers([...preventiveBarriers, newBarrier]);
    } else {
      setProtectiveBarriers([...protectiveBarriers, newBarrier]);
    }
  };
  
  const removeBarrier = (type: 'preventive' | 'protective', index: number) => {
    if (type === 'preventive') {
      setPreventiveBarriers(preventiveBarriers.filter((_, i) => i !== index));
    } else {
      setProtectiveBarriers(protectiveBarriers.filter((_, i) => i !== index));
    }
  };
  
  const updateBarrier = (type: 'preventive' | 'protective', index: number, field: string, value: any) => {
    if (type === 'preventive') {
      const updated = [...preventiveBarriers];
      updated[index] = { ...updated[index], [field]: value };
      setPreventiveBarriers(updated);
    } else {
      const updated = [...protectiveBarriers];
      updated[index] = { ...updated[index], [field]: value };
      setProtectiveBarriers(updated);
    }
  };
  
  const addAction = () => {
    setAdditionalActions([...additionalActions, {
      action_description: '',
      barrier_type: 'PREVENTIVE',
      hierarchy_level: 3,
      responsible_person_id: null,
      target_date: new Date(),
      status: 'PLANNED',
    }]);
  };
  
  const removeAction = (index: number) => {
    setAdditionalActions(additionalActions.filter((_, i) => i !== index));
  };
  
  const updateAction = (index: number, field: string, value: any) => {
    const updated = [...additionalActions];
    updated[index] = { ...updated[index], [field]: value };
    setAdditionalActions(updated);
  };
  
  const handleSubmit = async () => {
    try {
      setSubmitting(true);
      
      const payload = {
        ...formData,
        assessment_date: formData.assessment_date.toISOString().split('T')[0],
        
        hazards_data: [{
          hazard_type: formData.hazard_type,
          hazard_description: formData.hazard_description,
          event_description: formData.event_description,
          causes: formData.causes,
          consequences: formData.consequences,
          impact_type: formData.impact_type,
          order: 1,
        }],
        
        exposure_data: {
          affected_personnel: formData.affected_personnel,
          number_exposed: formData.number_exposed,
          exposure_frequency: formData.exposure_frequency,
          exposure_duration: formData.exposure_duration,
          vulnerable_groups: formData.vulnerable_groups,
        },
        
        barriers_data: [
          ...preventiveBarriers.map((b, i) => ({ ...b, barrier_type: 'PREVENTIVE', order: i + 1 })),
          ...protectiveBarriers.map((b, i) => ({ ...b, barrier_type: 'PROTECTIVE', order: i + 1 })),
        ],
        
        treatment_actions_data: additionalActions.map((a, i) => ({
          ...a,
          target_date: a.target_date.toISOString().split('T')[0],
          order: i + 1,
        })),
      };
      
      if (editingAssessment) {
        await axiosInstance.put(`/risks/assessments/${editingAssessment.id}/`, payload);
      } else {
        await axiosInstance.post('/risks/assessments/', payload);
      }
      
      onSuccess();
      onClose();
    } catch (error: any) {
      console.error('Error saving risk assessment:', error);
      alert(error.response?.data?.error || 'Failed to save risk assessment');
    } finally {
      setSubmitting(false);
    }
  };
  
  return (
    <LocalizationProvider dateAdapter={AdapterDateFns}>
      <Dialog
        open={open}
        onClose={onClose}
        maxWidth="lg"
        fullWidth
        PaperProps={{ sx: { borderRadius: 3, maxHeight: '90vh' } }}
      >
        <DialogTitle sx={{ pb: 2, borderBottom: `1px solid ${alpha(theme.palette.divider, 0.1)}` }}>
          <Typography variant="h5" sx={{ fontWeight: 700 }}>
            {editingAssessment ? 'Edit' : 'New'} Risk Assessment
          </Typography>
          <Typography variant="body2" color="text.secondary">
            ISO 45001:2018 & ISO 31000 Compliant Risk Assessment
          </Typography>
        </DialogTitle>
        
        <DialogContent dividers sx={{ p: 3 }}>
          <Stack spacing={3}>
            
            {/* SECTION 1: Activity Identification */}
            <Accordion defaultExpanded>
              <AccordionSummary expandIcon={<ExpandMoreIcon />} sx={{ bgcolor: alpha(theme.palette.primary.main, 0.04) }}>
                <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                  1. Activity Identification
                </Typography>
              </AccordionSummary>
              <AccordionDetails>
                <Grid container spacing={2}>
                  <Grid item xs={12} md={6}>
                    <TextField
                      fullWidth
                      label="Location"
                      value={formData.location}
                      onChange={(e) => setFormData({ ...formData, location: e.target.value })}
                      required
                      helperText="e.g., Warehouse, Office, Production Floor"
                    />
                  </Grid>
                  
                  <Grid item xs={12} md={6}>
                    <TextField
                      fullWidth
                      label="Process Area"
                      value={formData.process_area}
                      onChange={(e) => setFormData({ ...formData, process_area: e.target.value })}
                      required
                      helperText="e.g., Material Handling, Welding, Administration"
                    />
                  </Grid>
                  
                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      multiline
                      rows={3}
                      label="Activity Description"
                      value={formData.activity_description}
                      onChange={(e) => setFormData({ ...formData, activity_description: e.target.value })}
                      required
                      placeholder="Detailed description of the activity or task being assessed..."
                    />
                  </Grid>
                  
                  <Grid item xs={12} md={4}>
                    <FormControl fullWidth required>
                      <InputLabel>Risk Category</InputLabel>
                      <Select
                        value={formData.risk_category}
                        label="Risk Category"
                        onChange={(e) => setFormData({ ...formData, risk_category: e.target.value })}
                      >
                        <MenuItem value="SAFETY">Occupational Safety</MenuItem>
                        <MenuItem value="HEALTH">Occupational Health</MenuItem>
                        <MenuItem value="ENVIRONMENTAL">Environmental</MenuItem>
                        <MenuItem value="SECURITY">Security</MenuItem>
                        <MenuItem value="PROCESS_SAFETY">Process Safety</MenuItem>
                      </Select>
                    </FormControl>
                  </Grid>
                  
                  <Grid item xs={12} md={4}>
                    <FormControl fullWidth required>
                      <InputLabel>Activity Type</InputLabel>
                      <Select
                        value={formData.activity_type}
                        label="Activity Type"
                        onChange={(e) => setFormData({ ...formData, activity_type: e.target.value })}
                      >
                        <MenuItem value="ROUTINE">Routine Operation</MenuItem>
                        <MenuItem value="NON_ROUTINE">Non-Routine Operation</MenuItem>
                        <MenuItem value="EMERGENCY">Emergency Response</MenuItem>
                        <MenuItem value="MAINTENANCE">Maintenance Activity</MenuItem>
                        <MenuItem value="CONSTRUCTION">Construction/Project</MenuItem>
                      </Select>
                    </FormControl>
                  </Grid>
                  
                  <Grid item xs={12} md={4}>
                    <DatePicker
                      label="Assessment Date"
                      value={formData.assessment_date}
                      onChange={(date) => setFormData({ ...formData, assessment_date: date || new Date() })}
                      slotProps={{ textField: { fullWidth: true, required: true } }}
                    />
                  </Grid>
                  
                  <Grid item xs={12}>
                    <Autocomplete
                      options={users}
                      getOptionLabel={(option) => `${option.first_name} ${option.last_name} (${option.position})`}
                      value={users.find(u => u.id === formData.risk_owner_id) || null}
                      onChange={(_, newValue) => setFormData({ ...formData, risk_owner_id: newValue?.id || null })}
                      renderInput={(params) => (
                        <TextField {...params} label="Risk Owner" helperText="Person accountable for managing this risk" />
                      )}
                    />
                  </Grid>
                </Grid>
              </AccordionDetails>
            </Accordion>
            
            {/* SECTION 2: Hazard Analysis */}
            <Accordion defaultExpanded>
              <AccordionSummary expandIcon={<ExpandMoreIcon />} sx={{ bgcolor: alpha(theme.palette.warning.main, 0.04) }}>
                <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                  2. Hazard Analysis
                </Typography>
              </AccordionSummary>
              <AccordionDetails>
                <Grid container spacing={2}>
                  <Grid item xs={12} md={6}>
                    <FormControl fullWidth required>
                      <InputLabel>Hazard Type</InputLabel>
                      <Select
                        value={formData.hazard_type}
                        label="Hazard Type"
                        onChange={(e) => setFormData({ ...formData, hazard_type: e.target.value })}
                      >
                        <MenuItem value="PROCESS">Process Hazard</MenuItem>
                        <MenuItem value="PRODUCT">Product/Material Hazard</MenuItem>
                        <MenuItem value="EXTERNAL">External Environment</MenuItem>
                        <MenuItem value="BEHAVIORAL">Behavioral/Human Factor</MenuItem>
                        <MenuItem value="ORGANIZATIONAL">Organizational/Systemic</MenuItem>
                      </Select>
                    </FormControl>
                  </Grid>
                  
                  <Grid item xs={12} md={6}>
                    <FormControl fullWidth required>
                      <InputLabel>Impact Type</InputLabel>
                      <Select
                        value={formData.impact_type}
                        label="Impact Type"
                        onChange={(e) => setFormData({ ...formData, impact_type: e.target.value })}
                      >
                        <MenuItem value="INJURY">Personal Injury</MenuItem>
                        <MenuItem value="ILLNESS">Occupational Illness</MenuItem>
                        <MenuItem value="ENVIRONMENTAL">Environmental Damage</MenuItem>
                        <MenuItem value="PROPERTY">Property Damage</MenuItem>
                        <MenuItem value="REPUTATION">Reputational Damage</MenuItem>
                        <MenuItem value="FINANCIAL">Financial Loss</MenuItem>
                      </Select>
                    </FormControl>
                  </Grid>
                  
                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      label="Hazard Description"
                      value={formData.hazard_description}
                      onChange={(e) => setFormData({ ...formData, hazard_description: e.target.value })}
                      required
                      placeholder="What is the hazard? e.g., Moving machinery, Chemical exposure, Slippery surface"
                    />
                  </Grid>
                  
                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      multiline
                      rows={2}
                      label="Description of Hazardous Event"
                      value={formData.event_description}
                      onChange={(e) => setFormData({ ...formData, event_description: e.target.value })}
                      required
                      placeholder="What hazardous event could occur? e.g., Worker struck by moving forklift"
                    />
                  </Grid>
                  
                  <Grid item xs={12} md={6}>
                    <TextField
                      fullWidth
                      multiline
                      rows={3}
                      label="Possible Causes/Triggers"
                      value={formData.causes}
                      onChange={(e) => setFormData({ ...formData, causes: e.target.value })}
                      required
                      placeholder="What could cause this event?&#10;- Poor visibility&#10;- Inadequate training&#10;- Equipment failure"
                    />
                  </Grid>
                  
                  <Grid item xs={12} md={6}>
                    <TextField
                      fullWidth
                      multiline
                      rows={3}
                      label="Possible Consequences"
                      value={formData.consequences}
                      onChange={(e) => setFormData({ ...formData, consequences: e.target.value })}
                      required
                      placeholder="What are the potential consequences?&#10;- Serious injury&#10;- Property damage&#10;- Production loss"
                    />
                  </Grid>
                </Grid>
              </AccordionDetails>
            </Accordion>
            
            {/* SECTION 3: Exposure */}
            <Accordion>
              <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                  3. Exposure Information
                </Typography>
              </AccordionSummary>
              <AccordionDetails>
                <Grid container spacing={2}>
                  <Grid item xs={12} md={4}>
                    <FormControl fullWidth required>
                      <InputLabel>Affected Personnel</InputLabel>
                      <Select
                        value={formData.affected_personnel}
                        label="Affected Personnel"
                        onChange={(e) => setFormData({ ...formData, affected_personnel: e.target.value })}
                      >
                        <MenuItem value="EMPLOYEES">Employees</MenuItem>
                        <MenuItem value="CONTRACTORS">Contractors</MenuItem>
                        <MenuItem value="VISITORS">Visitors</MenuItem>
                        <MenuItem value="PUBLIC">General Public</MenuItem>
                        <MenuItem value="EMERGENCY">Emergency Responders</MenuItem>
                      </Select>
                    </FormControl>
                  </Grid>
                  
                  <Grid item xs={12} md={4}>
                    <TextField
                      fullWidth
                      type="number"
                      label="Number of People Exposed"
                      value={formData.number_exposed}
                      onChange={(e) => setFormData({ ...formData, number_exposed: parseInt(e.target.value) || 1 })}
                      required
                      InputProps={{ inputProps: { min: 1 } }}
                    />
                  </Grid>
                  
                  <Grid item xs={12} md={4}>
                    <FormControl fullWidth required>
                      <InputLabel>Exposure Frequency</InputLabel>
                      <Select
                        value={formData.exposure_frequency}
                        label="Exposure Frequency"
                        onChange={(e) => setFormData({ ...formData, exposure_frequency: e.target.value })}
                      >
                        <MenuItem value="CONTINUOUS">Continuous (daily, all shift)</MenuItem>
                        <MenuItem value="FREQUENT">Frequent (daily, part of shift)</MenuItem>
                        <MenuItem value="OCCASIONAL">Occasional (weekly)</MenuItem>
                        <MenuItem value="INFREQUENT">Infrequent (monthly)</MenuItem>
                        <MenuItem value="RARE">Rare (yearly or less)</MenuItem>
                      </Select>
                    </FormControl>
                  </Grid>
                  
                  <Grid item xs={12} md={6}>
                    <TextField
                      fullWidth
                      label="Exposure Duration"
                      value={formData.exposure_duration}
                      onChange={(e) => setFormData({ ...formData, exposure_duration: e.target.value })}
                      placeholder="e.g., 2 hours per day, 15 minutes per week"
                    />
                  </Grid>
                  
                  <Grid item xs={12} md={6}>
                    <TextField
                      fullWidth
                      label="Vulnerable Groups"
                      value={formData.vulnerable_groups}
                      onChange={(e) => setFormData({ ...formData, vulnerable_groups: e.target.value })}
                      placeholder="e.g., Young workers, Pregnant women, Disabled persons"
                    />
                  </Grid>
                </Grid>
              </AccordionDetails>
            </Accordion>
            
            {/* SECTION 4: Initial Risk (Without Controls) */}
            <Accordion defaultExpanded>
              <AccordionSummary expandIcon={<ExpandMoreIcon />} sx={{ bgcolor: alpha(theme.palette.error.main, 0.04) }}>
                <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                  4. Initial Risk (Without Barriers)
                </Typography>
              </AccordionSummary>
              <AccordionDetails>
                <Grid container spacing={2}>
                  <Grid item xs={12} md={5}>
                    <FormControl fullWidth required>
                      <InputLabel>Probability</InputLabel>
                      <Select
                        value={formData.initial_probability}
                        label="Probability"
                        onChange={(e) => setFormData({ ...formData, initial_probability: Number(e.target.value) })}
                      >
                        {config && Object.entries(config.probability_definitions).reverse().map(([value, def]: [string, any]) => (
                          <MenuItem key={value} value={Number(value)}>
                            {value} - {def.label} ({def.frequency})
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                  </Grid>
                  
                  <Grid item xs={12} md={5}>
                    <FormControl fullWidth required>
                      <InputLabel>Severity</InputLabel>
                      <Select
                        value={formData.initial_severity}
                        label="Severity"
                        onChange={(e) => setFormData({ ...formData, initial_severity: Number(e.target.value) })}
                      >
                        {config && Object.entries(config.severity_definitions).reverse().map(([value, def]: [string, any]) => (
                          <MenuItem key={value} value={Number(value)}>
                            {value} - {def.label} ({def.description})
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                  </Grid>
                  
                  <Grid item xs={12} md={2}>
                    <Paper
                      sx={{
                        p: 2,
                        bgcolor: alpha(getRiskColor(initialRiskLevel), 0.15),
                        border: `2px solid ${getRiskColor(initialRiskLevel)}`,
                        textAlign: 'center',
                      }}
                    >
                      <Typography variant="h4" sx={{ fontWeight: 700, color: getRiskColor(initialRiskLevel) }}>
                        {initialRiskLevel}
                      </Typography>
                      <Typography variant="caption" sx={{ fontWeight: 600, color: getRiskColor(initialRiskLevel) }}>
                        {getRiskRating(initialRiskLevel)}
                      </Typography>
                    </Paper>
                  </Grid>
                  
                  {config && (
                    <Grid item xs={12}>
                      <Alert severity="info" icon={<InfoIcon />}>
                        <Typography variant="caption">
                          <strong>Initial Risk</strong> = Risk level WITHOUT any controls or barriers in place
                        </Typography>
                      </Alert>
                    </Grid>
                  )}
                </Grid>
              </AccordionDetails>
            </Accordion>
            
            {/* SECTION 5: Existing Controls - Preventive */}
            <Accordion>
              <AccordionSummary expandIcon={<ExpandMoreIcon />} sx={{ bgcolor: alpha(theme.palette.info.main, 0.04) }}>
                <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                  5. Preventive Barriers (Event Prevention)
                </Typography>
                <Chip label={preventiveBarriers.length} size="small" sx={{ ml: 2 }} />
              </AccordionSummary>
              <AccordionDetails>
                <Stack spacing={2}>
                  <Typography variant="body2" color="text.secondary">
                    Controls that prevent the hazardous event from occurring
                  </Typography>
                  
                  {preventiveBarriers.map((barrier, index) => (
                    <Paper key={index} sx={{ p: 2, border: `1px solid ${alpha(theme.palette.info.main, 0.2)}` }}>
                      <Grid container spacing={2}>
                        <Grid item xs={12}>
                          <Stack direction="row" justifyContent="space-between" alignItems="center">
                            <Typography variant="subtitle2" sx={{ fontWeight: 600 }}>
                              Preventive Barrier #{index + 1}
                            </Typography>
                            <IconButton size="small" color="error" onClick={() => removeBarrier('preventive', index)}>
                              <DeleteIcon fontSize="small" />
                            </IconButton>
                          </Stack>
                        </Grid>
                        
                        <Grid item xs={12}>
                          <TextField
                            fullWidth
                            label="Barrier Description"
                            value={barrier.description}
                            onChange={(e) => updateBarrier('preventive', index, 'description', e.target.value)}
                            required
                            placeholder="e.g., Machine guarding, Safety interlocks, Permit-to-work system"
                          />
                        </Grid>
                        
                        <Grid item xs={12} md={6}>
                          <FormControl fullWidth required>
                            <InputLabel>Hierarchy of Controls</InputLabel>
                            <Select
                              value={barrier.hierarchy_level}
                              label="Hierarchy of Controls"
                              onChange={(e) => updateBarrier('preventive', index, 'hierarchy_level', e.target.value)}
                            >
                              <MenuItem value={1}>1 - Elimination (Most Effective)</MenuItem>
                              <MenuItem value={2}>2 - Substitution</MenuItem>
                              <MenuItem value={3}>3 - Engineering Controls</MenuItem>
                              <MenuItem value={4}>4 - Administrative Controls</MenuItem>
                              <MenuItem value={5}>5 - PPE (Least Effective)</MenuItem>
                            </Select>
                          </FormControl>
                        </Grid>
                        
                        <Grid item xs={12} md={6}>
                          <FormControl fullWidth required>
                            <InputLabel>Effectiveness Rating</InputLabel>
                            <Select
                              value={barrier.effectiveness_rating}
                              label="Effectiveness Rating"
                              onChange={(e) => updateBarrier('preventive', index, 'effectiveness_rating', e.target.value)}
                            >
                              <MenuItem value={5}>5 - Very High (Highly Effective)</MenuItem>
                              <MenuItem value={4}>4 - High (Effective)</MenuItem>
                              <MenuItem value={3}>3 - Medium (Moderately Effective)</MenuItem>
                              <MenuItem value={2}>2 - Low (Limited Effectiveness)</MenuItem>
                              <MenuItem value={1}>1 - Very Low (Ineffective)</MenuItem>
                            </Select>
                          </FormControl>
                        </Grid>
                        
                        <Grid item xs={12} md={6}>
                          <TextField
                            fullWidth
                            label="Evidence of Effectiveness"
                            value={barrier.evidence}
                            onChange={(e) => updateBarrier('preventive', index, 'evidence', e.target.value)}
                            placeholder="e.g., Inspection records, Test results, Maintenance logs"
                          />
                        </Grid>
                        
                        <Grid item xs={12} md={6}>
                          <FormControl fullWidth>
                            <InputLabel>Condition</InputLabel>
                            <Select
                              value={barrier.condition}
                              label="Condition"
                              onChange={(e) => updateBarrier('preventive', index, 'condition', e.target.value)}
                            >
                              <MenuItem value="EXCELLENT">Excellent</MenuItem>
                              <MenuItem value="GOOD">Good</MenuItem>
                              <MenuItem value="FAIR">Fair</MenuItem>
                              <MenuItem value="POOR">Poor</MenuItem>
                              <MenuItem value="FAILED">Failed/Not Working</MenuItem>
                            </Select>
                          </FormControl>
                        </Grid>
                      </Grid>
                    </Paper>
                  ))}
                  
                  <Button
                    variant="outlined"
                    startIcon={<AddIcon />}
                    onClick={() => addBarrier('preventive')}
                    fullWidth
                  >
                    Add Preventive Barrier
                  </Button>
                </Stack>
              </AccordionDetails>
            </Accordion>
            
            {/* SECTION 6: Existing Controls - Protective */}
            <Accordion>
              <AccordionSummary expandIcon={<ExpandMoreIcon />} sx={{ bgcolor: alpha(theme.palette.success.main, 0.04) }}>
                <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                  6. Protective Barriers (Severity Reduction)
                </Typography>
                <Chip label={protectiveBarriers.length} size="small" sx={{ ml: 2 }} />
              </AccordionSummary>
              <AccordionDetails>
                <Stack spacing={2}>
                  <Typography variant="body2" color="text.secondary">
                    Controls that reduce the severity of consequences if the event occurs
                  </Typography>
                  
                  {protectiveBarriers.map((barrier, index) => (
                    <Paper key={index} sx={{ p: 2, border: `1px solid ${alpha(theme.palette.success.main, 0.2)}` }}>
                      <Grid container spacing={2}>
                        <Grid item xs={12}>
                          <Stack direction="row" justifyContent="space-between" alignItems="center">
                            <Typography variant="subtitle2" sx={{ fontWeight: 600 }}>
                              Protective Barrier #{index + 1}
                            </Typography>
                            <IconButton size="small" color="error" onClick={() => removeBarrier('protective', index)}>
                              <DeleteIcon fontSize="small" />
                            </IconButton>
                          </Stack>
                        </Grid>
                        
                        <Grid item xs={12}>
                          <TextField
                            fullWidth
                            label="Barrier Description"
                            value={barrier.description}
                            onChange={(e) => updateBarrier('protective', index, 'description', e.target.value)}
                            required
                            placeholder="e.g., Emergency stop buttons, First aid availability, Fire suppression"
                          />
                        </Grid>
                        
                        <Grid item xs={12} md={6}>
                          <FormControl fullWidth required>
                            <InputLabel>Hierarchy of Controls</InputLabel>
                            <Select
                              value={barrier.hierarchy_level}
                              label="Hierarchy of Controls"
                              onChange={(e) => updateBarrier('protective', index, 'hierarchy_level', e.target.value)}
                            >
                              <MenuItem value={1}>1 - Elimination</MenuItem>
                              <MenuItem value={2}>2 - Substitution</MenuItem>
                              <MenuItem value={3}>3 - Engineering Controls</MenuItem>
                              <MenuItem value={4}>4 - Administrative Controls</MenuItem>
                              <MenuItem value={5}>5 - PPE</MenuItem>
                            </Select>
                          </FormControl>
                        </Grid>
                        
                        <Grid item xs={12} md={6}>
                          <FormControl fullWidth required>
                            <InputLabel>Effectiveness Rating</InputLabel>
                            <Select
                              value={barrier.effectiveness_rating}
                              label="Effectiveness Rating"
                              onChange={(e) => updateBarrier('protective', index, 'effectiveness_rating', e.target.value)}
                            >
                              <MenuItem value={5}>5 - Very High</MenuItem>
                              <MenuItem value={4}>4 - High</MenuItem>
                              <MenuItem value={3}>3 - Medium</MenuItem>
                              <MenuItem value={2}>2 - Low</MenuItem>
                              <MenuItem value={1}>1 - Very Low</MenuItem>
                            </Select>
                          </FormControl>
                        </Grid>
                      </Grid>
                    </Paper>
                  ))}
                  
                  <Button
                    variant="outlined"
                    startIcon={<AddIcon />}
                    onClick={() => addBarrier('protective')}
                    fullWidth
                  >
                    Add Protective Barrier
                  </Button>
                </Stack>
              </AccordionDetails>
            </Accordion>
            
            {/* SECTION 7: Residual Risk (With Existing Controls) */}
            <Accordion defaultExpanded>
              <AccordionSummary expandIcon={<ExpandMoreIcon />} sx={{ bgcolor: alpha(theme.palette.success.main, 0.04) }}>
                <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                  7. Residual Risk (With Existing Barriers)
                </Typography>
              </AccordionSummary>
              <AccordionDetails>
                <Grid container spacing={2}>
                  <Grid item xs={12} md={5}>
                    <FormControl fullWidth required>
                      <InputLabel>Probability</InputLabel>
                      <Select
                        value={formData.residual_probability}
                        label="Probability"
                        onChange={(e) => setFormData({ ...formData, residual_probability: Number(e.target.value) })}
                      >
                        {config && Object.entries(config.probability_definitions).reverse().map(([value, def]: [string, any]) => (
                          <MenuItem key={value} value={Number(value)}>
                            {value} - {def.label}
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                  </Grid>
                  
                  <Grid item xs={12} md={5}>
                    <FormControl fullWidth required>
                      <InputLabel>Severity</InputLabel>
                      <Select
                        value={formData.residual_severity}
                        label="Severity"
                        onChange={(e) => setFormData({ ...formData, residual_severity: Number(e.target.value) })}
                      >
                        {config && Object.entries(config.severity_definitions).reverse().map(([value, def]: [string, any]) => (
                          <MenuItem key={value} value={Number(value)}>
                            {value} - {def.label}
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                  </Grid>
                  
                  <Grid item xs={12} md={2}>
                    <Paper
                      sx={{
                        p: 2,
                        bgcolor: alpha(getRiskColor(residualRiskLevel), 0.15),
                        border: `2px solid ${getRiskColor(residualRiskLevel)}`,
                        textAlign: 'center',
                      }}
                    >
                      <Typography variant="h4" sx={{ fontWeight: 700, color: getRiskColor(residualRiskLevel) }}>
                        {residualRiskLevel}
                      </Typography>
                      <Typography variant="caption" sx={{ fontWeight: 600, color: getRiskColor(residualRiskLevel) }}>
                        {getRiskRating(residualRiskLevel)}
                      </Typography>
                    </Paper>
                  </Grid>
                  
                  <Grid item xs={12}>
                    <Alert 
                      severity={residualRiskLevel <= config.low_threshold ? 'success' : residualRiskLevel <= config.medium_threshold ? 'warning' : 'error'}
                    >
                      <Typography variant="caption">
                        <strong>Residual Risk</strong> = Risk level WITH existing controls in place. 
                        This should be lower than initial risk if controls are effective.
                      </Typography>
                    </Alert>
                  </Grid>
                  
                  {/* Risk Comparison */}
                  <Grid item xs={12}>
                    <Paper sx={{ p: 2, bgcolor: alpha(theme.palette.info.main, 0.03) }}>
                      <Typography variant="body2" sx={{ fontWeight: 600, mb: 1 }}>
                        Risk Reduction Analysis
                      </Typography>
                      <Stack direction="row" spacing={3} alignItems="center">
                        <Box>
                          <Typography variant="caption" color="text.secondary">Initial</Typography>
                          <Chip
                            label={`${initialRiskLevel} - ${getRiskRating(initialRiskLevel)}`}
                            sx={{
                              bgcolor: getRiskColor(initialRiskLevel),
                              color: 'white',
                              fontWeight: 600,
                              ml: 1,
                            }}
                          />
                        </Box>
                        <Typography variant="h6">→</Typography>
                        <Box>
                          <Typography variant="caption" color="text.secondary">Residual</Typography>
                          <Chip
                            label={`${residualRiskLevel} - ${getRiskRating(residualRiskLevel)}`}
                            sx={{
                              bgcolor: getRiskColor(residualRiskLevel),
                              color: 'white',
                              fontWeight: 600,
                              ml: 1,
                            }}
                          />
                        </Box>
                        <Box sx={{ flex: 1 }}>
                          <Typography variant="body2" sx={{ fontWeight: 600 }}>
                            Reduction: {initialRiskLevel - residualRiskLevel} points 
                            {initialRiskLevel > residualRiskLevel ? ' ✅' : ' ⚠️'}
                          </Typography>
                        </Box>
                      </Stack>
                    </Paper>
                  </Grid>
                </Grid>
              </AccordionDetails>
            </Accordion>
            
            {/* SECTION 8: Risk Evaluation */}
            <Accordion>
              <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                  8. Risk Evaluation & ALARP
                </Typography>
              </AccordionSummary>
              <AccordionDetails>
                <Grid container spacing={2}>
                  <Grid item xs={12} md={6}>
                    <FormControl fullWidth required>
                      <InputLabel>Risk Acceptable?</InputLabel>
                      <Select
                        value={formData.risk_acceptable ? 'yes' : 'no'}
                        label="Risk Acceptable?"
                        onChange={(e) => setFormData({ ...formData, risk_acceptable: e.target.value === 'yes' })}
                      >
                        <MenuItem value="yes">Yes - Acceptable</MenuItem>
                        <MenuItem value="no">No - Further Action Required</MenuItem>
                      </Select>
                    </FormControl>
                  </Grid>
                  
                  <Grid item xs={12} md={6}>
                    <FormControl fullWidth required>
                      <InputLabel>ALARP Required?</InputLabel>
                      <Select
                        value={formData.alarp_required ? 'yes' : 'no'}
                        label="ALARP Required?"
                        onChange={(e) => setFormData({ ...formData, alarp_required: e.target.value === 'yes' })}
                      >
                        <MenuItem value="yes">Yes - ALARP Demonstration Needed</MenuItem>
                        <MenuItem value="no">No</MenuItem>
                      </Select>
                    </FormControl>
                  </Grid>
                  
                  {formData.alarp_required && (
                    <Grid item xs={12}>
                      <TextField
                        fullWidth
                        multiline
                        rows={3}
                        label="ALARP Justification"
                        value={formData.alarp_justification}
                        onChange={(e) => setFormData({ ...formData, alarp_justification: e.target.value })}
                        required={formData.alarp_required}
                        placeholder="Explain why risk cannot be further reduced (cost-benefit, technical feasibility, etc.)"
                      />
                    </Grid>
                  )}
                  
                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      multiline
                      rows={2}
                      label="Management Decision"
                      value={formData.management_decision}
                      onChange={(e) => setFormData({ ...formData, management_decision: e.target.value })}
                      placeholder="Management decision on risk acceptability and required actions"
                    />
                  </Grid>
                </Grid>
              </AccordionDetails>
            </Accordion>
            
            {/* SECTION 9: Additional Barriers to Implement */}
            <Accordion>
              <AccordionSummary expandIcon={<ExpandMoreIcon />} sx={{ bgcolor: alpha(theme.palette.warning.main, 0.04) }}>
                <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                  9. Additional Barriers to Implement
                </Typography>
                <Chip label={additionalActions.length} size="small" sx={{ ml: 2 }} />
              </AccordionSummary>
              <AccordionDetails>
                <Stack spacing={2}>
                  <Typography variant="body2" color="text.secondary">
                    Risk treatment actions required to further reduce risk
                  </Typography>
                  
                  {additionalActions.map((action, index) => (
                    <Paper key={index} sx={{ p: 2, border: `1px solid ${alpha(theme.palette.warning.main, 0.2)}` }}>
                      <Grid container spacing={2}>
                        <Grid item xs={12}>
                          <Stack direction="row" justifyContent="space-between" alignItems="center">
                            <Typography variant="subtitle2" sx={{ fontWeight: 600 }}>
                              Action #{index + 1}
                            </Typography>
                            <IconButton size="small" color="error" onClick={() => removeAction(index)}>
                              <DeleteIcon fontSize="small" />
                            </IconButton>
                          </Stack>
                        </Grid>
                        
                        <Grid item xs={12}>
                          <TextField
                            fullWidth
                            label="Action Description"
                            value={action.action_description}
                            onChange={(e) => updateAction(index, 'action_description', e.target.value)}
                            required
                            placeholder="e.g., Install proximity sensors, Implement training program"
                          />
                        </Grid>
                        
                        <Grid item xs={12} md={4}>
                          <FormControl fullWidth>
                            <InputLabel>Barrier Type</InputLabel>
                            <Select
                              value={action.barrier_type}
                              label="Barrier Type"
                              onChange={(e) => updateAction(index, 'barrier_type', e.target.value)}
                            >
                              <MenuItem value="PREVENTIVE">Preventive</MenuItem>
                              <MenuItem value="PROTECTIVE">Protective</MenuItem>
                            </Select>
                          </FormControl>
                        </Grid>
                        
                        <Grid item xs={12} md={4}>
                          <FormControl fullWidth>
                            <InputLabel>Hierarchy Level</InputLabel>
                            <Select
                              value={action.hierarchy_level}
                              label="Hierarchy Level"
                              onChange={(e) => updateAction(index, 'hierarchy_level', e.target.value)}
                            >
                              <MenuItem value={1}>1 - Elimination</MenuItem>
                              <MenuItem value={2}>2 - Substitution</MenuItem>
                              <MenuItem value={3}>3 - Engineering</MenuItem>
                              <MenuItem value={4}>4 - Administrative</MenuItem>
                              <MenuItem value={5}>5 - PPE</MenuItem>
                            </Select>
                          </FormControl>
                        </Grid>
                        
                        <Grid item xs={12} md={4}>
                          <Autocomplete
                            options={users}
                            getOptionLabel={(option) => `${option.first_name} ${option.last_name}`}
                            value={users.find(u => u.id === action.responsible_person_id) || null}
                            onChange={(_, newValue) => updateAction(index, 'responsible_person_id', newValue?.id || null)}
                            renderInput={(params) => (
                              <TextField {...params} label="Person Responsible" required />
                            )}
                          />
                        </Grid>
                        
                        <Grid item xs={12}>
                          <DatePicker
                            label="Target Implementation Date"
                            value={action.target_date}
                            onChange={(date) => updateAction(index, 'target_date', date || new Date())}
                            slotProps={{ textField: { fullWidth: true, required: true } }}
                          />
                        </Grid>
                      </Grid>
                    </Paper>
                  ))}
                  
                  <Button
                    variant="outlined"
                    startIcon={<AddIcon />}
                    onClick={addAction}
                    fullWidth
                  >
                    Add Additional Barrier/Action
                  </Button>
                </Stack>
              </AccordionDetails>
            </Accordion>
            
            {/* SECTION 10: Comments */}
            <TextField
              fullWidth
              multiline
              rows={3}
              label="Additional Comments"
              value={formData.comments}
              onChange={(e) => setFormData({ ...formData, comments: e.target.value })}
              placeholder="Any additional notes, observations, or recommendations..."
            />
            
          </Stack>
        </DialogContent>
        
        <DialogActions sx={{ p: 2.5, borderTop: `1px solid ${alpha(theme.palette.divider, 0.1)}` }}>
          <Box sx={{ flex: 1 }}>
            <Chip
              label={`Residual Risk: ${residualRiskLevel} - ${getRiskRating(residualRiskLevel)}`}
              sx={{
                bgcolor: getRiskColor(residualRiskLevel),
                color: 'white',
                fontWeight: 700,
              }}
            />
          </Box>
          <Button onClick={onClose} disabled={submitting}>
            Cancel
          </Button>
          <Button
            variant="contained"
            onClick={handleSubmit}
            disabled={submitting}
            sx={{
              background: `linear-gradient(135deg, ${theme.palette.primary.main}, ${theme.palette.secondary.main})`,
            }}
          >
            {submitting ? 'Saving...' : editingAssessment ? 'Update Assessment' : 'Create Assessment'}
          </Button>
        </DialogActions>
      </Dialog>
    </LocalizationProvider>
  );
};

export default RiskAssessmentForm;


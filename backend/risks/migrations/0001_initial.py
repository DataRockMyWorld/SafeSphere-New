# Generated by Django 5.0.14 on 2025-10-17 15:29

import datetime
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('audits', '0010_add_company_settings'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RiskAssessment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_number', models.CharField(editable=False, max_length=50, unique=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('UNDER_REVIEW', 'Under Review'), ('APPROVED', 'Approved'), ('ACTIVE', 'Active'), ('ARCHIVED', 'Archived')], default='DRAFT', max_length=20)),
                ('version', models.IntegerField(default=1)),
                ('assessment_date', models.DateField(default=datetime.date.today)),
                ('approval_date', models.DateField(blank=True, null=True)),
                ('review_date', models.DateField(blank=True, help_text='Last review date', null=True)),
                ('next_review_date', models.DateField(blank=True, help_text='Next scheduled review', null=True)),
                ('location', models.CharField(help_text='Location or facility', max_length=255)),
                ('process_area', models.CharField(help_text='Process or department', max_length=255)),
                ('activity_description', models.TextField(help_text='Detailed description of activity being assessed')),
                ('risk_category', models.CharField(choices=[('SAFETY', 'Occupational Safety'), ('HEALTH', 'Occupational Health'), ('ENVIRONMENTAL', 'Environmental'), ('SECURITY', 'Security'), ('PROCESS_SAFETY', 'Process Safety')], max_length=20)),
                ('activity_type', models.CharField(choices=[('ROUTINE', 'Routine Operation'), ('NON_ROUTINE', 'Non-Routine Operation'), ('EMERGENCY', 'Emergency Response'), ('MAINTENANCE', 'Maintenance Activity'), ('CONSTRUCTION', 'Construction/Project')], max_length=20)),
                ('initial_probability', models.IntegerField(help_text='1-5: Probability without controls', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('initial_severity', models.IntegerField(help_text='1-5: Severity without controls', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('residual_probability', models.IntegerField(help_text='1-5: Probability with existing controls', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('residual_severity', models.IntegerField(help_text='1-5: Severity with existing controls', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('risk_acceptable', models.BooleanField(default=False)),
                ('alarp_required', models.BooleanField(default=False)),
                ('alarp_justification', models.TextField(blank=True, help_text='Justification for ALARP (if residual risk is medium/high)')),
                ('management_decision', models.TextField(blank=True, help_text='Management decision on risk acceptability')),
                ('iso_45001_clauses', models.JSONField(blank=True, default=list, help_text='Applicable ISO 45001 clauses')),
                ('legal_requirements', models.JSONField(blank=True, default=list, help_text='Applicable legal requirements')),
                ('company_procedures', models.JSONField(blank=True, default=list, help_text='Applicable company procedures')),
                ('comments', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='risk_assessments_approved', to=settings.AUTH_USER_MODEL)),
                ('assessed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='risk_assessments_created', to=settings.AUTH_USER_MODEL)),
                ('risk_owner', models.ForeignKey(blank=True, help_text='Person accountable for managing this risk', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='risks_owned', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'permissions': [('can_approve_risk', 'Can approve risk assessments'), ('can_manage_risks', 'Can manage all risk assessments')],
            },
        ),
        migrations.CreateModel(
            name='ControlBarrier',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('barrier_type', models.CharField(choices=[('PREVENTIVE', 'Preventive (Prevent event occurrence)'), ('PROTECTIVE', 'Protective (Reduce consequences)')], max_length=20)),
                ('description', models.TextField(help_text='Control/barrier description')),
                ('hierarchy_level', models.IntegerField(choices=[(1, 'Elimination'), (2, 'Substitution'), (3, 'Engineering Controls'), (4, 'Administrative Controls'), (5, 'Personal Protective Equipment (PPE)')], help_text='Hierarchy of controls (1=best, 5=least effective)')),
                ('effectiveness_rating', models.IntegerField(choices=[(5, 'Very High - Highly Effective'), (4, 'High - Effective'), (3, 'Medium - Moderately Effective'), (2, 'Low - Limited Effectiveness'), (1, 'Very Low - Ineffective')], help_text='How effective is this barrier?')),
                ('evidence', models.TextField(blank=True, help_text='Evidence that barrier is effective (e.g., inspection records, test results)')),
                ('last_inspected_date', models.DateField(blank=True, null=True)),
                ('next_inspection_date', models.DateField(blank=True, null=True)),
                ('condition', models.CharField(choices=[('EXCELLENT', 'Excellent'), ('GOOD', 'Good'), ('FAIR', 'Fair'), ('POOR', 'Poor'), ('FAILED', 'Failed/Not Working')], default='GOOD', max_length=20)),
                ('order', models.IntegerField(default=1)),
                ('barrier_owner', models.ForeignKey(blank=True, help_text='Person responsible for maintaining this barrier', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='barriers_owned', to=settings.AUTH_USER_MODEL)),
                ('risk_assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='barriers', to='risks.riskassessment')),
            ],
            options={
                'ordering': ['barrier_type', 'hierarchy_level', 'order'],
            },
        ),
        migrations.CreateModel(
            name='RiskAttachment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file', models.FileField(upload_to='risk_assessments/%Y/%m/')),
                ('file_type', models.CharField(choices=[('PHOTO', 'Photograph'), ('BOWTIE', 'Bowtie Diagram'), ('JSA', 'Job Safety Analysis'), ('PROCEDURE', 'Procedure/SOP'), ('INSPECTION', 'Inspection Report'), ('OTHER', 'Other Document')], max_length=20)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('risk_assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='risks.riskassessment')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='risk_attachments_uploaded', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='RiskExposure',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('affected_personnel', models.CharField(choices=[('EMPLOYEES', 'Employees'), ('CONTRACTORS', 'Contractors'), ('VISITORS', 'Visitors'), ('PUBLIC', 'General Public'), ('EMERGENCY', 'Emergency Responders')], help_text='Type of personnel exposed', max_length=20)),
                ('number_exposed', models.IntegerField(help_text='Approximate number of people exposed', validators=[django.core.validators.MinValueValidator(1)])),
                ('exposure_frequency', models.CharField(choices=[('CONTINUOUS', 'Continuous (daily, all shift)'), ('FREQUENT', 'Frequent (daily, part of shift)'), ('OCCASIONAL', 'Occasional (weekly)'), ('INFREQUENT', 'Infrequent (monthly)'), ('RARE', 'Rare (yearly or less)')], max_length=20)),
                ('exposure_duration', models.CharField(blank=True, help_text="e.g., '2 hours per day', '15 minutes per week'", max_length=255)),
                ('vulnerable_groups', models.TextField(blank=True, help_text='Any vulnerable groups? (young workers, pregnant, disabled, etc.)')),
                ('risk_assessment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='exposure', to='risks.riskassessment')),
            ],
            options={
                'verbose_name': 'Risk Exposure',
                'verbose_name_plural': 'Risk Exposures',
            },
        ),
        migrations.CreateModel(
            name='RiskHazard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('hazard_type', models.CharField(choices=[('PROCESS', 'Process Hazard'), ('PRODUCT', 'Product/Material Hazard'), ('EXTERNAL', 'External Environment Hazard'), ('BEHAVIORAL', 'Behavioral/Human Factor'), ('ORGANIZATIONAL', 'Organizational/Systemic')], max_length=20)),
                ('hazard_description', models.TextField(help_text='What is the hazard?')),
                ('event_description', models.TextField(help_text='What is the hazardous event/scenario?')),
                ('causes', models.TextField(help_text='What could cause this event? (Initiating/triggering factors)')),
                ('consequences', models.TextField(help_text='What are the possible consequences?')),
                ('impact_type', models.CharField(choices=[('INJURY', 'Personal Injury'), ('ILLNESS', 'Occupational Illness'), ('ENVIRONMENTAL', 'Environmental Damage'), ('PROPERTY', 'Property Damage'), ('REPUTATION', 'Reputational Damage'), ('FINANCIAL', 'Financial Loss')], max_length=20)),
                ('order', models.IntegerField(default=1)),
                ('risk_assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hazards', to='risks.riskassessment')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='RiskMatrixConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matrix_size', models.IntegerField(default=5)),
                ('probability_definitions', models.JSONField(default=dict, help_text='\n        {\n            "1": {"label": "Rare", "description": "<10% chance, almost never", "examples": "..."},\n            "2": {"label": "Unlikely", "description": "10-30%, rarely", "examples": "..."},\n            ...\n        }\n        ')),
                ('severity_definitions', models.JSONField(default=dict, help_text='\n        {\n            "1": {"label": "Negligible", "description": "Near miss, no injury", "examples": "..."},\n            "2": {"label": "Minor", "description": "First aid injury", "examples": "..."},\n            ...\n        }\n        ')),
                ('low_threshold', models.IntegerField(default=5, help_text='Risk ≤ this is LOW')),
                ('medium_threshold', models.IntegerField(default=12, help_text='Risk ≤ this is MEDIUM')),
                ('low_risk_color', models.CharField(default='#388E3C', max_length=7)),
                ('medium_risk_color', models.CharField(default='#F57C00', max_length=7)),
                ('high_risk_color', models.CharField(default='#D32F2F', max_length=7)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='risk_matrix_updates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Risk Matrix Configuration',
                'verbose_name_plural': 'Risk Matrix Configuration',
            },
        ),
        migrations.CreateModel(
            name='RiskReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('review_date', models.DateField(default=datetime.date.today)),
                ('changes_made', models.TextField(help_text='What changed since last review?')),
                ('previous_risk_level', models.IntegerField(blank=True, null=True)),
                ('new_risk_level', models.IntegerField(blank=True, null=True)),
                ('controls_effective', models.BooleanField(default=True, help_text='Are existing controls still effective?')),
                ('new_hazards_identified', models.BooleanField(default=False, help_text='Were new hazards identified?')),
                ('next_review_date', models.DateField(blank=True, help_text='When should next review occur?', null=True)),
                ('comments', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='risk_reviews_conducted', to=settings.AUTH_USER_MODEL)),
                ('risk_assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='risks.riskassessment')),
            ],
            options={
                'ordering': ['-review_date'],
            },
        ),
        migrations.CreateModel(
            name='RiskTreatmentAction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action_description', models.TextField(help_text='Barrier/control to be implemented')),
                ('barrier_type', models.CharField(choices=[('PREVENTIVE', 'Preventive'), ('PROTECTIVE', 'Protective')], max_length=20)),
                ('hierarchy_level', models.IntegerField(choices=[(1, 'Elimination'), (2, 'Substitution'), (3, 'Engineering Controls'), (4, 'Administrative Controls'), (5, 'Personal Protective Equipment (PPE)')], help_text='Hierarchy of controls')),
                ('target_date', models.DateField(help_text='Target implementation date')),
                ('status', models.CharField(choices=[('PLANNED', 'Planned'), ('IN_PROGRESS', 'In Progress'), ('IMPLEMENTED', 'Implemented'), ('VERIFIED', 'Verified'), ('CANCELLED', 'Cancelled')], default='PLANNED', max_length=20)),
                ('actual_implementation_date', models.DateField(blank=True, null=True)),
                ('verification_method', models.TextField(blank=True, help_text='How will effectiveness be verified?')),
                ('verification_date', models.DateField(blank=True, null=True)),
                ('order', models.IntegerField(default=1)),
                ('linked_capa', models.ForeignKey(blank=True, help_text='Link to CAPA if action requires formal corrective action', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='risk_actions', to='audits.capa')),
                ('responsible_person', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='risk_actions_responsible', to=settings.AUTH_USER_MODEL)),
                ('risk_assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_actions', to='risks.riskassessment')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='risk_actions_verified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddIndex(
            model_name='riskassessment',
            index=models.Index(fields=['status', 'risk_category'], name='risks_riska_status_ef71fe_idx'),
        ),
        migrations.AddIndex(
            model_name='riskassessment',
            index=models.Index(fields=['location', 'process_area'], name='risks_riska_locatio_913919_idx'),
        ),
        migrations.AddIndex(
            model_name='riskassessment',
            index=models.Index(fields=['next_review_date'], name='risks_riska_next_re_91a267_idx'),
        ),
    ]

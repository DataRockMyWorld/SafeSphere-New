name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: safesphere-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend:
    name: Backend (Django) CI
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: safesphere
          POSTGRES_USER: safesphere
          POSTGRES_PASSWORD: safesphere
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U safesphere -d safesphere" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
    defaults:
      run:
        working-directory: backend
    env:
      SECRET_KEY: dummy_secret_key_for_ci
      DEBUG: 'True'
      DB_NAME: safesphere
      DB_USER: safesphere
      DB_PASSWORD: safesphere
      DB_HOST: 127.0.0.1
      DB_PORT: '5432'
      EMAIL_HOST_USER: noreply@example.com
      EMAIL_HOST_PASSWORD: dummy
      DEFAULT_FROM_EMAIL: noreply@example.com
      FRONTEND_URL: http://localhost:5173
      JWT_SECRET_KEY: dummy_jwt_secret
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run migrations
        run: |
          python manage.py migrate --noinput

      - name: Run tests
        run: |
          python manage.py test --noinput

  frontend:
    name: Frontend (Vite/React) CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

  deploy:
    name: Deploy to Production (DigitalOcean)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add server to known_hosts
        run: |
          ssh-keyscan -p "${{ secrets.SSH_PORT || 22 }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Deploy via SSH
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT || 22 }}
          DEPLOY_DIR: ${{ secrets.DEPLOY_DIR || '/opt/safesphere' }}
        run: |
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" << 'EOF'
          set -e
          echo "==> Switching to deploy directory"
          cd "$DEPLOY_DIR"

          echo "==> Fetching latest code"
          if [ -d .git ]; then
            git fetch origin main
            git reset --hard origin/main
          else
            git clone https://github.com/${{ github.repository }} .
            git checkout main
          fi

          echo "==> Bringing up containers"
          docker-compose -f docker-compose.ssl.yml pull || true
          docker-compose -f docker-compose.ssl.yml up -d --build

          echo "==> Post-deploy checks"
          docker-compose -f docker-compose.ssl.yml ps | cat
          sleep 5
          curl -I https://safespheres.info/api/v1/health/ | cat || true
          EOF

      - name: Deployment summary
        run: echo "Deployment to ${{ secrets.SSH_HOST }} completed."

name: SafeSphere CI/CD Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, '3.10', 3.11]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: safesphere_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          postgresql-client \
          libpq-dev \
          python3-dev \
          build-essential
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Set up environment variables
      working-directory: ./backend
      run: |
        cp ../.env.example ../.env
        echo "DEBUG=True" >> ../.env
        echo "SECRET_KEY=test-secret-key-for-ci-only" >> ../.env
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/safesphere_test" >> ../.env
    
    - name: Run migrations
      working-directory: ./backend
      run: |
        python manage.py migrate --noinput
    
    - name: Run linters
      working-directory: ./backend
      run: |
        flake8 . --exclude=venv,migrations,htmlcov --max-line-length=120 --count --show-source --statistics
        black --check --exclude=venv . || true
        isort --check-only --skip venv --skip migrations . || true
    
    - name: Run unit tests
      working-directory: ./backend
      run: |
        pytest -m "not slow and not integration" \
               --cov=. \
               --cov-report=xml \
               --cov-report=term-missing \
               --cov-fail-under=70 \
               -v
    
    - name: Run integration tests
      working-directory: ./backend
      run: |
        pytest -m "integration" -v || true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Generate coverage report
      working-directory: ./backend
      run: |
        coverage report
    
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          backend/htmlcov/
          backend/coverage.xml
          backend/.coverage

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        pip install bandit safety
    
    - name: Run Bandit security scan
      working-directory: ./backend
      run: |
        bandit -r . -ll -x tests/,venv/,htmlcov/ || true
    
    - name: Check for vulnerable dependencies
      working-directory: ./backend
      run: |
        safety check --json || true

  build:
    name: Build Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        pip install -r requirements.txt
    
    - name: Check for migrations
      working-directory: ./backend
      run: |
        python manage.py makemigrations --check --dry-run --noinput
    
    - name: Collect static files
      working-directory: ./backend
      run: |
        python manage.py collectstatic --noinput || true

  notify:
    name: Notify Results
    needs: [test, security, build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Test suite completed"
        echo "Test status: ${{ needs.test.result }}"
        echo "Security status: ${{ needs.security.result }}"
        echo "Build status: ${{ needs.build.result }}"


version: '3.8'

services:
  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-ssl.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - /var/www/certbot:/var/www/certbot:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s 
    networks:
      - safesphere_network

  # Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    env_file:
      - .env.prod
    volumes:
      - backend_static:/app/staticfiles
      - backend_media:/app/media
      - backend_logs:/app/logs
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - safesphere_network

  # Celery worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    command: ["/opt/venv/bin/celery", "-A", "core", "worker", "--loglevel=info"]
    volumes:
      - backend_media:/app/media
      - backend_logs:/app/logs
    env_file:
      - .env.prod
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - safesphere_network

  # Celery beat (scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    command: ["/opt/venv/bin/celery", "-A", "core", "beat", "--loglevel=info"]
    volumes:
      - backend_logs:/app/logs
    env_file:
      - .env.prod
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - safesphere_network

  # Redis
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - safesphere_network

volumes:
  redis_data:
  backend_static:
  backend_media:
  backend_logs:
  nginx_logs:

networks:
  safesphere_network:
    driver: bridge
